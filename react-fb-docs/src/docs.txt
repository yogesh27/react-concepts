
Step 1.
-------
ReactDOM.render(<h1>Hello, world!</h1>, document.getElementById('root'));

Step 2. 
-------
function formatName(user) {
    return user.firstName + ' ' + user.lastName;
}

const user = {
    firstName: 'Yogesh',
    lastName: 'Asthana'
};

const element = (
    <h1>
        Hello, {formatName(user)}!
    </h1>
);

ReactDOM.render(element, document.getElementById('root'));


Step 3:
-------

function tick() {
    const element = (
        <div>
            <h1>Hello, world!</h1>
            <h2>It is {new Date().toLocaleTimeString()}.</h2>
        </div>
    );
    ReactDOM.render(element, document.getElementById('root'));
}
setInterval(tick, 1000);

React elements are immutable. Once you create an element, you can’t change its children or attributes. 
An element is like a single frame in a movie: it represents the UI at a certain point in time.

React Only Updates What’s Necessary
Even though we create an element describing the whole UI tree on every tick, 
only the text node whose contents has changed gets updated by React DOM.

Unlike browser DOM elements, React elements are plain objects, and are cheap to create. 
React DOM takes care of updating the DOM to match the React elements.


Step 4:
-------

Functional Components:
---------------------

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
const element = <Welcome name="Yogesh Asthana (func Component)" />;
ReactDOM.render(element, document.getElementById('root'));

Class Components:
---------------------

class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
const element = <Welcome name="Yogesh Asthana (class Component)" />;
ReactDOM.render(element, document.getElementById('root'));

Always start component names with a capital letter.
React treats components starting with lowercase letters as DOM tags. 
For example, <div /> represents an HTML div tag, but <Welcome /> represents a component and requires Welcome to be in scope.


Step 5:
------

Components can refer to other components in their output.

function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);

https://codepen.io/pen?&editors=0010

Props are Read-Only
Whether you declare a component as a function or a class, it must never modify its own props


Step 6:
------

Converting component to class

Below wont dynamically update time

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}
ReactDOM.render(<Clock />, document.getElementById('root'));

We want to set up a timer whenever the Clock is rendered to the DOM for the first time. This is called “mounting” in React.

We also want to clear that timer whenever the DOM produced by the Clock is removed. This is called “unmounting” in React.

Step 7:
-------

Lifecycle hooks:
----------------

class Clock extends React.Component {
    constructor(props) {
      super(props);
      this.state = {date: new Date()};

      console.log("constructor()");
    }
  
    componentDidMount() {
        console.log("componentDidMount()")
        this.timerID = setInterval(
            () => this.tick(),
            1000
        );
    }
  
    tick() {
        this.setState({
            date: new Date()
        });
    }

    removeTimer(){
        this.setState({
            isTimerRemoved: true
        })
    }
  
    render() {
        console.log("render()");
        const isTimerRemoved = this.state.isTimerRemoved;
        if(isTimerRemoved){
            return <h1>Timer remover</h1>
        }
        return (
            <div>
                <h1>Hello, world!</h1>
                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
            </div>
        );
    }
}
ReactDOM.render(<Clock />,document.getElementById('root'));




